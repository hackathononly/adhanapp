---
import Layout from "../../layouts/Layout.astro";
import Constants from "../../constants";
import PrayerTimeTable from "../../components/PrayerTimeTable.astro";
import mainData from "../../../public/prayertime/2024.json";

export async function getStaticPaths() {
	let returnedAry: any = [];

	for (const state in Constants.locations) {
		const location = Constants.locations,
			cities = location[state as keyof typeof location];
		for (const city in cities) {
			returnedAry.push({
				params: { state, city },
				props: {
					cities: Object.entries(cities),
					location: cities[city as keyof typeof cities],
				},
			});
		}
	}
	return returnedAry;
}

const { city, state } = Astro.params;
const { cities, location } = Astro.props;

const currentCityCode = city
		? city
		: Constants.defaultSettings.waktuSolatStateCode,
	allWaktuSolat = mainData.data.data[0];

const currentDate = new Date(),
	monthNames = Object.values(Constants.monthMalay),
	dd = String(currentDate.getDate()).padStart(2, "0"),
	month = monthNames[currentDate.getMonth()],
	year = currentDate.getFullYear(),
	formattedDate = `${dd}-${month}-${year}`;

function findPrayerTimeByZoneAndDate(data: any, zone: any, date: string) {
	for (const row of data.rows) {
		if (row.zone === zone) {
			for (const prayerTime of row.prayerTime) {
				if (prayerTime.date === date) {
					return prayerTime;
				}
			}
		}
	}
	return null; // Return null if zone or date is not found
}

const waktuSolat = findPrayerTimeByZoneAndDate(
	allWaktuSolat,
	currentCityCode,
	formattedDate,
);

const { hijri, date, day, ...filteredObject } = waktuSolat;
const formattedTimeObject: { [key: string]: any } = {};

for (const key in filteredObject) {
	if (Object.hasOwnProperty.call(filteredObject, key)) {
		const timeString = filteredObject[key];
		const timeComponents = timeString.split(":");

		// Create a Date object and set the time
		const date = new Date();
		date.setHours(parseInt(timeComponents[0]));
		date.setMinutes(parseInt(timeComponents[1]));
		date.setSeconds(parseInt(timeComponents[2]));

		// Format the time to AM/PM format
		const formattedTime = date.toLocaleTimeString("en-US", { hour12: true });

		formattedTimeObject[key] = formattedTime;
	}
}

// Get current time
const currentTime = currentDate.getTime();

// Convert each time value to timestamp and calculate the difference
let closestTime: string;
let minDifference = Infinity;

for (const key in filteredObject) {
	if (Object.hasOwnProperty.call(filteredObject, key)) {
		const timeString = filteredObject[key];
		const [hours, minutes, seconds] = timeString.split(/:| /);
		let time = new Date();
		time.setHours(hours);
		time.setMinutes(minutes);
		time.setSeconds(seconds);
		const timeValue = time.getTime();
		const difference = Math.abs(currentTime - timeValue);
		if (difference < minDifference) {
			minDifference = difference;
			closestTime = key;
		}
	}
}
---

<Layout title={state + " - " + location} state={state} city={cities}>
	<div
		class="py-10 nav grid grid-cols-1 sm:grid-cols-2 md:grid-cols-2 lg:grid-cols-2 xl:grid-cols-2 gap-5"
	>
		<div>
			<h1 class="text-center text-xl font-bold">{location}</h1>
			<div class="flex justify-evenly items-center">
				<small>{hijri}, {date}, {day}</small>
			</div>
		</div>
		<div>
			<PrayerTimeTable />
		</div>
	</div>
</Layout>
